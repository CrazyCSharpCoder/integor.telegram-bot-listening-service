// <auto-generated />
using System;
using IntegorTelegramBotListeningServices.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IntegorTelegramBotListeningServices.Migrations
{
    [DbContext(typeof(IntegorTelegramBotListeningDataContext))]
    [Migration("20230425121931_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IntegorTelegramBotListeningModel.TelegramBot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("IntegorTelegramBotListeningModel.TelegramMessage", b =>
                {
                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FromId")
                        .HasColumnType("bigint");

                    b.Property<int>("RelatedBotId")
                        .HasColumnType("integer");

                    b.Property<long?>("ReplyToMessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("MessageId");

                    b.HasIndex("FromId");

                    b.HasIndex("RelatedBotId");

                    b.HasIndex("ReplyToMessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("IntegorTelegramBotListeningModel.TelegramUser", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AggregatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBot")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("boolean");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IntegorTelegramBotListeningModel.TelegramMessage", b =>
                {
                    b.HasOne("IntegorTelegramBotListeningModel.TelegramUser", "From")
                        .WithMany("Messages")
                        .HasForeignKey("FromId");

                    b.HasOne("IntegorTelegramBotListeningModel.TelegramBot", "RelatedBot")
                        .WithMany("RelatedMessages")
                        .HasForeignKey("RelatedBotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntegorTelegramBotListeningModel.TelegramMessage", "ReplyToMessage")
                        .WithMany()
                        .HasForeignKey("ReplyToMessageId");

                    b.Navigation("From");

                    b.Navigation("RelatedBot");

                    b.Navigation("ReplyToMessage");
                });

            modelBuilder.Entity("IntegorTelegramBotListeningModel.TelegramBot", b =>
                {
                    b.Navigation("RelatedMessages");
                });

            modelBuilder.Entity("IntegorTelegramBotListeningModel.TelegramUser", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
